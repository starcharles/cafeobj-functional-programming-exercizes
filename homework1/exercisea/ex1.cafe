
-- (1)factorial function
-- open NAT .
--     op fact : Nat -> Nat .
--     var NzX : NzNat .
--     eq fact(0) = 1 .
--     eq fact(NzX) = NzX * fact(p NzX) .
--     --
--     red  fact(0) .
--     red  fact(1) .
--     red  fact(10) .
--     red  fact(100) .
--     red  fact(1000) .
--     -- red  fact(10000) .
-- end

-- (2) Odd Even factorial function

open NAT .
    op cond : Bool Nat Nat -> Nat .
    op g : Nat Nat -> Nat .
    op oedc-fact : Nat -> Nat .
    vars X Y : Nat . var NzX : NzNat .
    -- cond
    eq cond(true, X, Y) = X .
    eq cond(false, X, Y) = Y .
    -- g
    eq g(X,Y) = cond(X > Y, g(X, 2 * Y, Y) * g(sd(X,Y), 2 * Y), X) .
    -- oedc-fact
    eq oedc-fact(0) = 1 .
    eq oedc-fact(NzX) = g(NzX, 1) .
    -- compute
    red oedc-fact(1000) .
close

-- (3) fibonacci function
open NAT .
    op fib : Nat -> Nat .
    var NzX : NzNat .
    -- fib
    eq fib(0) = 0 .
    eq fib(NzX) = sfib(p NzX) .
    -- sfib
    eq sfib(0) = 1 .
    eq sfib(NzX) = fib(NzX) + fib(p NzX) .
    --
    red fib(10) .
    red fib(20) .
    red fib(30) .
close

-- (4) Ackermann function

-- open NAT .
--     op ack : Nat Nat -> Nat .
--     var Y : Nat .
--     vars NzX NzY : NzNat .
--     eq ack(0,Y) = Y + 1 .
--     eq ack(NzX, 0) = ack(p NzX, 1) .
--     eq ack(NzX, NzY) = ack(p NzX, ack(NzX, p NzY)) .
--     --
--     red ack(0, 0) .
--     red ack(1, 1) .
--     red ack(2, 2) .
--     red ack(3, 2) .
--     red ack(3, 3) .
-- close
